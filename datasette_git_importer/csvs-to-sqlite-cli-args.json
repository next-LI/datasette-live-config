[
  {
    "command": "--separator",
    "args": "TEXT",
    "description": "Field separator in input .csv"
  },
  {
    "command": "--quoting",
    "args": "INTEGER",
    "description": "Control field quoting behavior per csv.QUOTE_* constants. Use one of QUOTE_MINIMAL (0), QUOTE_ALL (1), QUOTE_NONNUMERIC (2) or QUOTE_NONE (3)."
  },
  {
    "command": "--skip-errors",
    "args": "",
    "description": "Skip lines with too many fields instead of stopping the import"
  },
  {
    "command": "--replace-tables",
    "args": "",
    "description": "Replace tables if they already exist"
  },
  {
    "command": "--table",
    "args": "TEXT",
    "description": "Table to use (instead of using CSV filename)"
  },
  {
    "command": "--extract-column",
    "args": "TEXT",
    "description": "One or more columns to 'extract' into a separate lookup table. If you pass a simple column name that column will be replaced with integer foreign key references to a new table of that name. You can customize the name of the table like so: state:States:state_name This will pull unique values from the 'state' column and use them to populate a new 'States' table, with an id column primary key and a state_name column containing the strings from the original column."
  },
  {
    "command": "--date",
    "args": "TEXT",
    "description": "One or more columns to parse into ISO formatted dates"
  },
  {
    "command": "--datetime",
    "args": "TEXT",
    "description": "One or more columns to parse into ISO formatted datetimes"
  },
  {
    "command": "--datetime-format",
    "args": "TEXT",
    "description": "One or more custom date format strings to try when parsing dates/datetimes"
  },
  {
    "command": "--primary-key",
    "args": "TEXT",
    "description": "One or more columns to use as the primary key"
  },
  {
    "command": "--fts",
    "args": "TEXT",
    "description": "One or more columns to use to populate a full- text index"
  },
  {
    "command": "--index",
    "args": "TEXT",
    "description": "Add index on this column (or a compound index with -i col1,col2)"
  },
  {
    "command": "--shape",
    "args": "TEXT",
    "description": "Custom shape for the DB table - format is csvcol:dbcol(TYPE),..."
  },
  {
    "command": "--filename-column",
    "args": "TEXT",
    "description": "Add a column with this name and populate with CSV file name"
  },
  {
    "command": "--no-index-fks",
    "args": "",
    "description": "Skip adding index to foreign key columns created using --extract-column (default is to add them)"
  },
  {
    "command": "--no-fulltext-fks",
    "args": "",
    "description": "Skip adding full-text index on values extracted using --extract-column (default is to add them)"
  },
  {
    "command": "--just-strings",
    "args": "",
    "description": "Import all columns as text strings by default (and, if specified, still obey --shape, --date/datetime, and --datetime-format)"
  }
]
